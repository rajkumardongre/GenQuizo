const Teacher = require('../models/Teacher');
const Quiz = require('../models/Quiz');
const Question = require('../models/Question');

const jwt = require('jsonwebtoken');

// create json web token
const maxAge = 3 * 24 * 60 * 60;
const createTeacherToken = (id) => {
	return jwt.sign({ id }, process.env.JWT_SECRET_KEY, {
		expiresIn: maxAge,
	});
};

const register_post = async (req, res, next) => {
    try {
        await Teacher.init();

        // Check if a user with the provided email already exists
        const existingTeacher = await Teacher.findOne({ email: req.body.email });
        if (existingTeacher) {
            // If a user with the same email exists, return an error response
            return res.status(400).json({ success: false, error: 'Email already exists' });
        }

        // Create a new teacher instance
        const new_teacher = new Teacher({
            email: req.body.email,
            password: req.body.password,
        });

        // Save the new teacher document to the database
        const result = await new_teacher.save();
        res.status(201).json({ success: true, data: result });
    } catch (error) {
        console.error(error);
        res.status(400).json({ success: false, error: error.message });
    }
};

const login_post = async (req, res) => {
	const { email, password } = req.body;
	try {
		const teacher = await Teacher.login(email, password);
		if (teacher == null) {
			// res.render('admin/login', { errMsg: 'Invalid Crediential' });
            return res.status(403).json({success: false, error: 'Teacher Access Denied' });
		} else {
			const token = createTeacherToken(teacher._id);
			res.cookie('jwt', token, { httpOnly: true, maxAge: maxAge * 1000 });
			// res.redirect('/api/admin/dashboard');
            return res.status(200).json({success: true, data:"Teacher login successfully!" });
		}
	} catch (err) {
		console.log(err.message);
		// res.render('admin/login', { errMsg: err.message });
        return res.status(403).json({success: false, error: err.message });
	}
};

const logout = (req, res) => {
	res.cookie('jwt', '', { maxAge: 1 });
	// res.redirect('/api/admin/login');
    return res.status(200).json({success: true, data:"Teacher logout successfully!" });
};

const getTopicResources = async (topic) => {
    return `Some information of ${topic}, This will be generated by AI.`
}

const getQuestionResources = async (question, options, topic) => {
    // Combine options into a single string
    const optionsString = options.join(', ');

    // Construct the meaningful sentence
    const sentence = `Question: ${question}. Options: ${optionsString}. Topic: ${topic}.`;

    return sentence;
}


const addQuiz = async (req, res) => {
    try {
        const teacherId = req.teacherId;
        let { quizQuestions, title } = req.body;
        if (!title) title = "Untitled";

        // Create an array to store promises for saving question documents
        const topicMap = new Map();
        const questionPromises = quizQuestions.map(async (questionData) => {
            const topic = questionData.topic;
            if (!topicMap.has(topic)) {
                const topicResources = await getTopicResources(topic);
                topicMap.set(topic, topicResources);
            }
            questionData.generated_resources = await getQuestionResources(questionData.question, questionData.options, questionData.topic);
            const question = new Question(questionData);
            return question.save();
        });

        // Execute all promises concurrently using Promise.all()
        const savedQuestions = await Promise.all(questionPromises);

        // Extract question IDs from saved question documents
        const questionIds = savedQuestions.map(question => question._id);

        // Create a new quiz document
        const newQuiz = new Quiz({
            teacherId: teacherId,
            questions: questionIds,
            title,
            generated_topics_resources: Object.fromEntries(topicMap) // Convert Map to Object
        });

        // Save the new quiz
        const savedQuiz = await newQuiz.save();

        // Update the teacher's quizId field
        await Teacher.findByIdAndUpdate(teacherId, { $push: { quizId: savedQuiz._id } });

        res.status(201).json({ success: true, message: 'Quiz created successfully', data: savedQuiz });
    } catch (error) {
        console.error('Error adding quiz:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
};



const getMyQuiz = async (req, res) => {
    try {
        // Fetch quizzes created by the teacher using the teacherId
        const quizzes = await Quiz.find({ teacherId: req.teacherId });
        
        const user = await Teacher.findById(req.teacherId);

        // Send the retrieved quizzes as response
        res.status(200).json({ success: true, quizzes: quizzes, user:user });
    } catch (error) {
        console.error('Error fetching quizzes:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
};

module.exports = {
	register_post,
	login_post,
	logout,
	addQuiz,
    getMyQuiz,
};
