const Teacher = require('../models/Teacher');
const Quiz = require('../models/Quiz');
const Question = require('../models/Question');
const Anthropic = require('@anthropic-ai/sdk');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const StudentQuiz = require('../models/StudentQuiz');


dotenv.config();

const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY,
});
  

// create json web token
const maxAge = 3 * 24 * 60 * 60;
const createTeacherToken = (id) => {
	return jwt.sign({ id }, process.env.JWT_SECRET_KEY, {
		expiresIn: maxAge,
	});
};

const register_post = async (req, res, next) => {
    try {
        await Teacher.init();

        // Check if a user with the provided email already exists
        const existingTeacher = await Teacher.findOne({ email: req.body.email });
        if (existingTeacher) {
            // If a user with the same email exists, return an error response
            return res.status(400).json({ success: false, error: 'Email already exists' });
        }

        // Create a new teacher instance
        const new_teacher = new Teacher({
            email: req.body.email,
            password: req.body.password,
        });

        // Save the new teacher document to the database
        const result = await new_teacher.save();
        res.status(201).json({ success: true, data: result });
    } catch (error) {
        console.error(error);
        res.status(400).json({ success: false, error: error.message });
    }
};

const login_post = async (req, res) => {
	const { email, password } = req.body;
	try {
		const teacher = await Teacher.login(email, password);
		if (teacher == null) {
			// res.render('admin/login', { errMsg: 'Invalid Crediential' });
            return res.status(403).json({success: false, error: 'Teacher Access Denied' });
		} else {
			const token = createTeacherToken(teacher._id);
			res.cookie('jwt', token, { httpOnly: true, maxAge: maxAge * 1000 });
			// res.redirect('/api/admin/dashboard');
            return res.status(200).json({success: true, data:"Teacher login successfully!" });
		}
	} catch (err) {
		console.log(err.message);
		// res.render('admin/login', { errMsg: err.message });
        return res.status(403).json({success: false, error: err.message });
	}
};

const logout = (req, res) => {
	res.cookie('jwt', '', { maxAge: 1 });
	// res.redirect('/api/admin/login');
    return res.status(200).json({success: true, data:"Teacher logout successfully!" });
};

// const getTopicResources = async (topic) => {
//     return `Some information of ${topic}, This will be generated by AI.`
// }
const getTopicResources = async (topic) => {
    const prompt = `You are an Educational Improvement and Recommendation System made for a college quiz website. 

    1. You will be given a Topic name. Use json format for output.
    2. Your task is to explain the topic and and give a detailed overview about it. Add information about any history or founder related to the topic. Everything should be in simple and understandable terms as this is meant for the improvement of a student. This should be done in the "information" key.
    3. Next you have to provide the names of good books along with their authors and publication date in the "refbooks" key which will contain an array. There can be multiple books which have the title in the "title" key and authors and publication date in the "author" key and "date" key respectively. 
    4. Next provide learning resources like blogs, articles, videos or other educational materials related to the topic as links. This should be done in the "resources" key which contains an array. There can be multiple resources which have a one line description in the "desc" key and the links inside should be in the "link" key.
    
    Output Format example:
    <example>
    {
     "information" : (The information about the topic that you will provide),
     "refbooks" : [
       {
        "title" : (title of book 1)
        "author" : (authors of book 1)
        "date" : (publication date of book)
       },
       {
        "title" : (title of book 2)
        "author" : (authors of book 2)
        "date" : (publication date of book)
       },
      ],
     "resources" : [
       {
        "desc" : (1. One line description of resource 1)
        "link" : (URL to resource 1)
       },
       {
        "desc" : (2. One line description of resource 2)
        "link" : (URL to resource 2)
       },
      ],
    }
    </example>
    
    Topic: {${topic}}`
    const msg = await anthropic.messages.create({
        model: 'claude-3-sonnet-20240229',
        max_tokens: 1024,
        messages: [{ role: 'user', content: prompt }],
      });
  
      console.log(msg);
      console.log(msg.content[0].text)
      return msg.content[0].text;
}

const getQuestionResources = async (question, options, answer) => {
    // Combine options into a single string
    const optionsString = options.join(', ');

    // Construct the meaningful sentence
    const prompt = `You are an Educational Improvement and Recommendation System made for a college quiz website. 

    1. You will be given a Question along with its Options and the Correct Answer from a quiz. Use json format.
    2. Your task is to give the solution to the question. Give the solution in simple and understandable terms as this is meant for the improvement of a student. This should be done in the "solution" key.
    3. Your next task is to explain why the given Correct Answer is correct and why each of the other Options are wrong. This should be done in the "eval" key which contains an array of strings of the evaluation of each option. Do not include the option number or letter in the string but start with the option's text in quotes followed by a colon. For example, ""option text": evaluation of option" 
    4. Next you have to provide learning resources like blogs, articles , videos or other educational materials specific to the Question as links. This should be done in the "resources" key which contains an array. There can be multiple resources which have a one line description in the "desc" key and the links inside should be in the "link" key.
    
    Output Format example:
    <example>
    "{
     "solution" : (The solution that you will provide),
     "eval" : {"Option 1 text": "Evaluation of option 1", "Option 2 text": "Evaluation of option 2", ....},
     "resources" : [
       {
        "desc" : (1. One line description of resource 1)
        "link" : (URL to resource 1)
       },
       {
        "desc" : (2. One line description of resource 2)
        "link" : (URL to resource 2)
       },
      ],
    }"
    </example>
    
    Question: {${question}}
    Options: {${optionsString}}
    Correct Answer: {${answer}}`;

    const msg = await anthropic.messages.create({
        model: 'claude-3-sonnet-20240229',
        max_tokens: 1024,
        messages: [{ role: 'user', content: prompt }],
      });
  
      console.log(msg);
      console.log(msg.content[0].text)
      return msg.content[0].text;
}


const addQuiz = async (req, res) => {
    try {
        const teacherId = req.teacherId;
        let { quizQuestions, title } = req.body;
        if (!title) title = "Untitled";

        // Create an array to store promises for saving question documents
        const topicMap = new Map();
        const questionPromises = quizQuestions.map(async (questionData) => {
            const topic = questionData.topic;
            if (!topicMap.has(topic)) {
                const topicResources = await getTopicResources(topic);
                topicMap.set(topic, topicResources);
            }
            questionData.generated_resources = await getQuestionResources(questionData.question, questionData.options, questionData.options[questionData.answer]);
            const question = new Question(questionData);
            return question.save();
        });

        // Execute all promises concurrently using Promise.all()
        const savedQuestions = await Promise.all(questionPromises);

        // Extract question IDs from saved question documents
        const questionIds = savedQuestions.map(question => question._id);

        // Create a new quiz document
        const newQuiz = new Quiz({
            teacherId: teacherId,
            questions: questionIds,
            title,
            generated_topics_resources: Object.fromEntries(topicMap) // Convert Map to Object
        });

        // Save the new quiz
        const savedQuiz = await newQuiz.save();

        // Update the teacher's quizId field
        await Teacher.findByIdAndUpdate(teacherId, { $push: { quizId: savedQuiz._id } });

        res.status(201).json({ success: true, message: 'Quiz created successfully', data: savedQuiz });
    } catch (error) {
        console.error('Error adding quiz:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
};


const getMyQuiz = async (req, res) => {
    try {
        // Fetch quizzes created by the teacher using the teacherId
        const quizzes = await Quiz.find({ teacherId: req.teacherId });
        
        const user = await Teacher.findById(req.teacherId);

        // Send the retrieved quizzes as response
        res.status(200).json({ success: true, quizzes: quizzes, user:user });
    } catch (error) {
        console.error('Error fetching quizzes:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
};


const getStudentAttemptedQuiz = async (req, res) => {
    const quizId = req.params.quizId;
    try {
        // Find the student attempts for the given quizId
        const studentAttemptedQuiz = await StudentQuiz.find({
            quizId: quizId,
        }).populate('studentId').populate("quizId");

        if (!studentAttemptedQuiz) {
            return res.status(404).json({ success: false, error: 'Student attempt not found for the provided quizId.' });
        }

        res.status(200).json({ success: true, data: studentAttemptedQuiz });
    } catch (error) {
        console.error('Error retrieving student attempted quiz:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
};


module.exports = {
	register_post,
	login_post,
	logout,
	addQuiz,
    getMyQuiz,
    getStudentAttemptedQuiz
};
